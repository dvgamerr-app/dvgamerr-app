{"version":3,"sources":["../server/index.js"],"names":["app","require","bodyParser","request","debuger","touno","Nuxt","Builder","host","process","env","HOST","port","PORT","reSecret","RECAPTCHA_SECRET","reEndpoint","RECAPTCHA_ENDPOINT","config","dev","NODE_ENV","use","req","res","next","methodAllow","setHeader","join","method","sendStatus","urlencoded","extended","json","post","body","token","Error","open","get","ResumeContact","url","formData","secret","response","data","success","Object","assign","sended","score","challenge","Date","challenge_ts","created","save","status","error","message","expressInitialize","logger","info","nuxt","builder","build","ready","render","listen","start"],"mappings":"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","sourcesContent":["const app = require('express')()\r\nconst bodyParser = require('body-parser')\r\nconst request = require('request-promise')\r\nconst debuger = require('@touno-io/debuger')\r\nconst { touno } = require('@touno-io/db/schema')\r\nconst { Nuxt, Builder } = require('nuxt')\r\n\r\nconst host = process.env.HOST || '127.0.0.1'\r\nconst port = process.env.PORT || 3000\r\nconst reSecret = process.env.RECAPTCHA_SECRET\r\nconst reEndpoint = process.env.RECAPTCHA_ENDPOINT || 'https://www.google.com/recaptcha/api/siteverify'\r\n// Import and Set Nuxt.js options\r\nlet config = require('../nuxt.config.js')\r\nconfig.dev = !(process.env.NODE_ENV === 'production')\r\n\r\nif (config.dev) {\r\n  app.use((req, res, next) => {\r\n    const methodAllow = [ 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT' ]\r\n    res.setHeader('Content-Type', 'application/json')\r\n    res.setHeader('Access-Control-Allow-Origin', '*')\r\n    res.setHeader('Access-Control-Allow-Headers', '*')\r\n    res.setHeader('Access-Control-Allow-Credentials', 'true')\r\n    res.setHeader('Access-Control-Allow-Methods', methodAllow.join(','))\r\n    if (req.method === 'OPTIONS') return res.sendStatus(200)\r\n    next()\r\n  })\r\n}\r\n\r\n// parse application/x-www-form-urlencoded\r\napp.use(bodyParser.urlencoded({ extended: false }))\r\n// parse application/json\r\napp.use(bodyParser.json())\r\n\r\napp.use('/my-resume', require('./resume.js'))\r\n\r\napp.post('/api/email', async (req, res) => {\r\n  try {\r\n    if (!reSecret || !req.body.token) throw new Error('Token Recaptcha expired.')\r\n\r\n    await touno.open()\r\n    const { ResumeContact } = touno.get()\r\n\r\n    let data = await request({\r\n      method: 'post',\r\n      url: reEndpoint,\r\n      json: true,\r\n      formData: {\r\n        secret: reSecret,\r\n        response: req.body.token\r\n      }\r\n    })\r\n    if (!data.success) throw new Error(data['error-codes'])\r\n    \r\n    await new ResumeContact(Object.assign({\r\n      sended: false,\r\n      score: data.score,\r\n      challenge: new Date(data.challenge_ts),\r\n      created: new Date()\r\n    }, req.body)).save()\r\n\r\n    // const { name, email, subject, text } = req.body\r\n    // await debuger.Slack({ \r\n    //   text: `*${subject}*\\n${text}\\n\\nby _${email}_`,\r\n    //   name: name,\r\n    //   channel: '#contact-us'\r\n    // })\r\n    res.status(200).json({ error: null })\r\n  } catch (ex) {\r\n    res.status(500).json({ error: ex.message || ex })\r\n  }\r\n})\r\n\r\n\r\nconst expressInitialize = async () => {\r\n  let logger = await debuger('SERVER')\r\n  await touno.open()\r\n  logger.info('Mongo connected.')\r\n  // Init Nuxt.js\r\n  const nuxt = new Nuxt(config)\r\n\r\n  if (config.dev) {\r\n    const builder = new Builder(nuxt)\r\n    await builder.build()\r\n  } else {\r\n    await nuxt.ready()\r\n  }\r\n  app.use(nuxt.render)\r\n\r\n  // Listen the server\r\n  await app.listen(port, host)\r\n  logger.start('Server listening on http://' + host + ':' + port) // eslint-disable-line no-console\r\n}\r\nexpressInitialize()\r\n"],"file":"index.js"}